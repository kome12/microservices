// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package commspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommsClient is the client API for Comms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommsClient interface {
	SendConfirmation(ctx context.Context, in *ConfirmationRequest, opts ...grpc.CallOption) (*ConfirmationResponse, error)
}

type commsClient struct {
	cc grpc.ClientConnInterface
}

func NewCommsClient(cc grpc.ClientConnInterface) CommsClient {
	return &commsClient{cc}
}

func (c *commsClient) SendConfirmation(ctx context.Context, in *ConfirmationRequest, opts ...grpc.CallOption) (*ConfirmationResponse, error) {
	out := new(ConfirmationResponse)
	err := c.cc.Invoke(ctx, "/comms.Comms/SendConfirmation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommsServer is the server API for Comms service.
// All implementations must embed UnimplementedCommsServer
// for forward compatibility
type CommsServer interface {
	SendConfirmation(context.Context, *ConfirmationRequest) (*ConfirmationResponse, error)
	mustEmbedUnimplementedCommsServer()
}

// UnimplementedCommsServer must be embedded to have forward compatible implementations.
type UnimplementedCommsServer struct {
}

func (UnimplementedCommsServer) SendConfirmation(context.Context, *ConfirmationRequest) (*ConfirmationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendConfirmation not implemented")
}
func (UnimplementedCommsServer) mustEmbedUnimplementedCommsServer() {}

// UnsafeCommsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommsServer will
// result in compilation errors.
type UnsafeCommsServer interface {
	mustEmbedUnimplementedCommsServer()
}

func RegisterCommsServer(s grpc.ServiceRegistrar, srv CommsServer) {
	s.RegisterService(&Comms_ServiceDesc, srv)
}

func _Comms_SendConfirmation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommsServer).SendConfirmation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comms.Comms/SendConfirmation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommsServer).SendConfirmation(ctx, req.(*ConfirmationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Comms_ServiceDesc is the grpc.ServiceDesc for Comms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Comms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comms.Comms",
	HandlerType: (*CommsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendConfirmation",
			Handler:    _Comms_SendConfirmation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "microservices/comms/comms.proto",
}
